// prisma/schema.prisma

datasource db {
  provider = "postgresql" // Change to your database provider if needed
  url      = env("DATABASE_URL") // Ensure DATABASE_URL is defined in your .env file
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int         @id @default(autoincrement())
  username          String      @unique
  email             String      @unique
  password          String      // Store hashed passwords
  profileImageUrl   String?     // URL to the user's profile image
  posts             Post[]      // Relation to posts
  comments          Comment[]   // Relation to comments
  likes             Like[]      // Relation to likes
  sentRequests      Friendship[] @relation("SentRequests")
  receivedRequests  Friendship[] @relation("ReceivedRequests")
  friends           User[]       @relation("UserFriends")
  friendOf         User[]       @relation("UserFriends")
  messagesSent      Message[] @relation("MessagesSent") // Relation to messages sent by this user
  messagesReceived  Message[] @relation("MessagesReceived") // Relation to messages received by this user
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Post {
  id                Int      @id @default(autoincrement())
  content           String   // Content of the post
  imageUrl          String?  // URL to the post's image
  authorId          Int      // Foreign key to User
  author            User     @relation(fields: [authorId], references: [id])
  comments          Comment[] // Relation to comments
  likes             Like[]   // Relation to likes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   // Content of the comment
  postId    Int      // Foreign key to Post
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int      // Foreign key to User
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int      // Foreign key to Post
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int      // Foreign key to User
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Friendship {
  id         Int      @id @default(autoincrement())
  senderId   Int      // Foreign key to User sending the request
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiverId Int      // Foreign key to User receiving the request
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  status     FriendshipStatus // Status of the friendship request
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   // Content of the message
  senderId   Int      // Foreign key to User who sent the message
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiverId Int      // Foreign key to User who received the message
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Enum to represent friendship statuses
enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
